# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
commands:
  ssh_host:
    steps:
      - run:
          name: "SSH to the host"
          command: |
            echo "SSH to the host"
            ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i ~/.ssh/id_rsa $SSH_USER@$SSH_HOST
            # exit 1
  print_pipeline_id:
    parameters:
      pipeline_id:
        type: string
    steps:
      - run: 
          name: "Print the pipeline ID"
          command: |
           echo "Pipeline ID << parameters.pipeline_id >>"
          #  exit 1

      - run: 
          name: "Send a message to the webhook"
          command: ./webhook.sh '{"text":"Failed"}'
          when: on_fail


# Use a package of configuration called an orb.
# orbs:
#   # Declare a dependency on the welcome-orb
#   welcome: circleci/welcome-orb@0.4.1
# Orchestrate or schedule a set of jobs
jobs:
  my_job:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - print_pipeline_id:
          pipeline_id: "test"
  ssh_job:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - ssh_host


  # save_hello_world_output:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - run: echo "hello world" > ~/output.txt
  #     - persist_to_workspace:
  #         root: ~/
  #         paths:
  #           - output.txt

  # print_output_file:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - attach_workspace:
  #         at: ~/
  #     - run: cat ~/output.txt


  # print_hello:
  #   docker:
  #     - image: cimg/node:13.8.0
  #   steps:
  #     - checkout
  #     - run: echo hello
  #     - run: ./webhook.sh '{"text":"hello"}'
  # print_world:
  #   docker:
  #     - image: cimg/node:13.8.0
  #   steps:
  #     - checkout
  #     - run: echo world
  #     - run: ./webhook.sh '{"text":"world"}'

workflows:
  my_workflow:
    jobs:
      - my_job
      - ssh_job:
          requires:
            - my_job
  # Test Integration of the pipeline
  # welcome:
  #   # Run the welcome/run job in its own container
  #   jobs:
  #     - welcome/run
  #     - print_hello
  #     - print_world:
  #         requires:
  #           - print_hello

# Shared Information between jobs
  # my_workflow:
  #   jobs:
  #     - save_hello_world_output
  #     - print_output_file:
  #         requires:
  #           - save_hello_world_output
